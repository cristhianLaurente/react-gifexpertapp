{"version":3,"sources":["components/AddCategory.tsx","hooks/useFetch.tsx","components/GifGridItem.tsx","components/GifGrid.tsx","GifExpertApp.tsx","index.tsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","useFetch","url","isMounted","useRef","data","loading","error","state","setState","useEffect","current","a","fetch","resp","status","json","fetchAsync","GifGridItem","id","title","className","src","alt","GifGrid","category","encodeURI","images","setImages","gifs","map","image","downsized_medium","img","key","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAkDeA,EArCwB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEtBC,mBAAiB,IAFK,mBAEnDC,EAFmD,KAEvCC,EAFuC,KAoB1D,OACI,0BAAMC,SAdW,SAACC,GAElBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAe,OAQf,2BACIO,KAAK,OACLC,MAAQT,EACRU,SArBS,SAACP,GAAD,OAAsBF,EAAcE,EAAEQ,OAAOF,Y,uBCyDvDG,EAlEE,SAAEC,GAGf,IAAMC,EAAYC,kBAAgB,GAHO,EAIfhB,mBAAiB,CAAEiB,KAAM,KAAMC,SAAS,EAAMC,MAAO,OAJtC,mBAIlCC,EAJkC,KAI3BC,EAJ2B,KA8DzC,OAxDAC,qBAAU,WACN,OAAO,WAAQP,EAAUQ,SAAU,KACpC,IAGHD,qBAAU,WACND,EAAS,CAAEJ,KAAM,KAAMC,SAAS,EAAMC,MAAO,OAE7B,uCAAG,gCAAAK,EAAA,+EAKMC,MAAMX,GALZ,OAKPY,EALO,YAOHA,EAAKC,OAPF,OASF,MATE,OAiBF,MAjBE,QAsBF,MAtBE,wCAWkBD,EAAKE,OAXvB,uBAWGX,EAXH,EAWGA,KAENF,EAAUQ,SACJF,EAAS,CAAEH,SAAS,EAAOC,MAAO,KAAMF,SAd3C,oCAmBHI,EAAS,CAAEH,SAAS,EAAOD,KAAM,KAAKE,MAAO,8BAnB1C,oCAwBHE,EAAS,CAAEH,SAAS,EAAOD,KAAM,KAAKE,MAAO,wBAxB1C,mHAiCXE,EACI,CACIJ,KAAM,KACNC,SAAS,EACTC,MAAO,8BArCJ,0DAAH,oDA4ChBU,KAED,CAACf,IAEGM,GC/CIU,EAjB0B,SAAC,GAAyB,EAAtBC,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOlB,EAAW,EAAXA,IAEpD,OACI,yBAAKmB,UAAU,0CACX,yBAAKC,IAAKpB,EAAKqB,IAAMH,IACrB,+BAAMA,EAAN,OCqEGI,EAzDkC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAG1CvB,EAAG,iDAA8CwB,UAAUD,GAAxD,sDAHsD,EAK9BxB,EAASC,GAAlCI,EALuD,EAKvDA,QAASC,EAL8C,EAK9CA,MAAOF,EALuC,EAKvCA,KALuC,EAOnCjB,mBAAuB,IAPY,mBAOxDuC,EAPwD,KAOhDC,EAPgD,KAgC/D,OAtBAlB,qBAAU,WAEN,IAAMJ,GAAoB,OAATD,EACjB,CAEI,IAAMwB,EAAOxB,EAAKyB,KAAK,SAACC,GAAmB,IAC/BC,EAAqBD,EAAMJ,OAA3BK,iBAER,MAAO,CACHb,GAAIY,EAAMZ,GACVC,MAAOW,EAAMX,MACblB,IAAK8B,EAAiB9B,QAG9B0B,EAAWC,MAIhB,CAACxB,EAAMC,IAKN,oCACI,wBAAIe,UAAU,qCAAd,IAAsDI,EAAtD,KACA,yBAAKJ,UAAU,aAEG,OAAVd,EAEK,iCAAQA,EAAR,KAGGD,EAEA,yBAAKe,UAAU,oCAAf,iBAEAM,EAAOG,KAAI,SAAEG,GACT,OAAO,kBAAC,EAAD,eAAaC,IAAMD,EAAId,IAASc,UC7CxDE,EArBM,WAAO,IAAD,EAEa/C,mBAAmB,CAAC,cAFjC,mBAEhBgD,EAFgB,KAEJjD,EAFI,KAKvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAGA,4BACMiD,EAAWN,KAAK,SAAAL,GAAQ,OACtB,kBAAC,EAAD,CAASS,IAAMT,EAAWA,SAAWA,UCZzDY,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,U","file":"static/js/main.d67dace0.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\ntype TEventInput = React.ChangeEvent< HTMLInputElement >\r\ntype TFormEvent = React.FormEvent< HTMLFormElement >\r\n\r\n\r\ninterface IProps {\r\n    setCategories : React.Dispatch< React.SetStateAction<string[]> >\r\n}\r\n\r\n\r\nconst AddCategory : React.FC<IProps> = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState<string>('');\r\n    \r\n    const handleUpdate = (e : TEventInput ) => setInputValue(e.target.value)\r\n\r\n\r\n    const handleSubmit = (e : TFormEvent ) => { \r\n\r\n        e.preventDefault(); \r\n\r\n        if ( inputValue.trim().length > 2 ) {\r\n\r\n            setCategories( cats => [ inputValue, ...cats ] ) \r\n            setInputValue( '' )\r\n\r\n        } \r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit  } >        \r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleUpdate }\r\n            />\r\n        </form>\r\n    )\r\n};\r\n\r\nAddCategory.propTypes = {\r\n\r\n    setCategories: PropTypes.func.isRequired    \r\n\r\n}\r\n\r\nexport default AddCategory\r\n","import { useState, useEffect, useRef } from 'react'\r\n\r\ninterface IFetch {\r\n    data: any | null,\r\n    loading: boolean,\r\n    error? : string | null\r\n}\r\n\r\nconst useFetch = ( url: string ) : IFetch => {\r\n    \r\n\r\n    const isMounted = useRef<boolean>(true)\r\n    const [state, setState] = useState<IFetch>({ data: null, loading: true, error: null });\r\n    \r\n    useEffect(() => {\r\n        return () => { isMounted.current = false };\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {        \r\n        setState({ data: null, loading: true, error: null });\r\n\r\n        const fetchAsync = async () => {\r\n\r\n            try \r\n            {\r\n\r\n                let resp = await fetch(url);\r\n\r\n                switch (resp.status) \r\n                {\r\n                    case 200:\r\n                        \r\n                        let { data } = await resp.json();\r\n\r\n                        isMounted.current && \r\n                            ( setState({ loading: false, error: null, data }) );\r\n                        break;\r\n                    \r\n                    case 404:\r\n\r\n                        setState({ loading: false, data: null,error: 'No existe la data buscada' })\r\n                        break; \r\n\r\n                    case 403:\r\n\r\n                        setState({ loading: false, data: null,error: 'Acceso denegado 403' })\r\n                        break;    \r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            catch (error) \r\n            {\r\n                setState(\r\n                    {\r\n                        data: null, \r\n                        loading: false, \r\n                        error: 'No se pudo cargar la info' \r\n                    }\r\n                );            \r\n            } \r\n\r\n        }\r\n\r\n        fetchAsync();\r\n    \r\n    }, [url])\r\n\r\n    return state\r\n\r\n}\r\n\r\nexport default useFetch\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { IGifItem } from './GifGrid';\r\n\r\n\r\n\r\nconst GifGridItem : React.FC<IGifItem> = ( { id, title, url } ) => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn' >\r\n            <img src={url} alt={ title} />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    url : PropTypes.string.isRequired,\r\n};\r\n\r\nexport default GifGridItem\r\n","import React, { useEffect } from 'react'\r\nimport useFetch from '../hooks/useFetch'\r\nimport { useState } from 'react';\r\nimport GifGridItem from './GifGridItem';\r\n\r\ninterface IGigsImages {\r\n    downsized_medium: {\r\n        url: string\r\n    }\r\n}\r\n\r\ninterface IGifs {\r\n    id: string,\r\n    title: string,\r\n    images: IGigsImages\r\n}\r\n\r\nexport interface IGifItem {\r\n    id: string,\r\n    title: string,\r\n    url: string\r\n}\r\n\r\nconst GifGrid : React.FC<{ category: string }> = ({ category }) => {\r\n    \r\n    \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=xBadCRbv5MJ1tboOS6COSGaDaoDEnk80`\r\n    \r\n    const { loading, error, data } = useFetch(url);\r\n\r\n    const [images, setImages] = useState< IGifItem[] >([]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if ( !loading && data !== null) \r\n        {\r\n\r\n            const gifs = data.map( (image : IGifs) => {\r\n                const { downsized_medium } = image.images;\r\n\r\n                return {\r\n                    id: image.id,\r\n                    title: image.title,\r\n                    url: downsized_medium.url\r\n                }\r\n            });\r\n            setImages( gifs )\r\n\r\n        }\r\n\r\n    }, [data, loading]);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn' > { category } </h3>\r\n            <div className='card-grid' >\r\n                {\r\n                    error !== null \r\n                    ? \r\n                        (<div> { error } </div>) \r\n                    : \r\n                        (\r\n                            loading \r\n                            ? \r\n                            <div className='animate__animated animate__flash' > ...cargando </div> \r\n                            :\r\n                            images.map(( img : IGifItem ) => {\r\n                                return <GifGridItem key={ img.id }{ ...img } />                                    \r\n                            })\r\n\r\n                        )\r\n                }                      \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState<string[]>(['One Punch']);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr/>\r\n\r\n\r\n            <ol>\r\n                { categories.map( category => \r\n                    <GifGrid key={ category } category={ category } /> \r\n                )}\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'animate.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n      <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}